//
//  OPMLFile.swift
//  Account
//
//  Created by Maurice Parker on 9/12/19.
//  Copyright Â© 2019 Ranchero Software, LLC. All rights reserved.
//

import Foundation
import os.log
import Parser
import ParserObjC
import Core

@MainActor final class OPMLFile {

	private var log = OSLog(subsystem: Bundle.main.bundleIdentifier!, category: "opmlFile")

	private let fileURL: URL
	private let account: Account
	private let dataFile: DataFile

	init(filename: String, account: Account) {

		self.account = account
		self.fileURL = URL(fileURLWithPath: filename)
		self.dataFile = DataFile(fileURL: self.fileURL)

		self.dataFile.delegate = self
	}
	
	func markAsDirty() {
		dataFile.markAsDirty()
	}
	
	func load() {
		guard let fileData = opmlFileData(), let opmlItems = parsedOPMLItems(fileData: fileData) else {
			return
		}
		
		BatchUpdate.shared.perform {
			account.loadOPMLItems(opmlItems)
		}
	}

	func save() {

		dataFile.save()
	}
}

private extension OPMLFile {

	func opmlFileData() -> Data? {
		var fileData: Data? = nil
		
		do {
			fileData = try Data(contentsOf: fileURL)
		} catch {
			os_log(.error, log: log, "OPML read from disk failed: %@.", error.localizedDescription)
		}

		return fileData
	}
	
	func parsedOPMLItems(fileData: Data) -> [RSOPMLItem]? {
		let parserData = ParserData(url: fileURL.absoluteString, data: fileData)
		var opmlDocument: RSOPMLDocument?

		do {
			opmlDocument = try RSOPMLParser.parseOPML(with: parserData)
		} catch {
			os_log(.error, log: log, "OPML Import failed: %@.", error.localizedDescription)
			return nil
		}
		
		return opmlDocument?.children
	}
	
	func opmlDocument() -> String {
		let escapedTitle = account.nameForDisplay.escapingSpecialXMLCharacters
		let openingText =
		"""
		<?xml version="1.0" encoding="UTF-8"?>
		<!-- OPML generated by NetNewsWire -->
		<opml version="1.1">
		<head>
		<title>\(escapedTitle)</title>
		</head>
		<body>

		"""

		let middleText = account.OPMLString(indentLevel: 0, allowCustomAttributes: true)

		let closingText =
		"""
				</body>
			</opml>
			"""

		let opml = openingText + middleText + closingText
		return opml
	}
}

extension OPMLFile: DataFileDelegate {

	func data(for dataFile: DataFile) -> Data? {

		guard !account.isDeleted else {
			return nil
		}

		let opmlDocumentString = opmlDocument()
		guard let data = opmlDocumentString.data(using: .utf8, allowLossyConversion: true) else {

			assertionFailure("OPML String conversion to Data failed.")
			os_log(.error, log: log, "OPML String conversion to Data failed.")
			return nil
		}

		return data
	}

	func dataFileWriteToDiskDidFail(for dataFile: DataFile, error: Error) {

		os_log(.error, log: log, "OPML save to disk failed: %@.", error.localizedDescription)
	}
}
